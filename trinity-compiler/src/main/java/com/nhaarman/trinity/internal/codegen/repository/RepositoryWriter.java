package com.nhaarman.trinity.internal.codegen.repository;

import com.nhaarman.trinity.internal.codegen.column.ColumnInfo;
import com.nhaarman.trinity.internal.codegen.column.ColumnMethodInfo;
import com.nhaarman.trinity.internal.codegen.table.TableInfo;
import com.squareup.javawriter.JavaWriter;

import java.io.IOException;
import java.util.Collection;

import javax.annotation.processing.Filer;
import javax.lang.model.element.ExecutableElement;
import javax.tools.JavaFileObject;

import static com.nhaarman.trinity.internal.codegen.Modifiers.PRIVATE_FINAL;
import static com.nhaarman.trinity.internal.codegen.Modifiers.PUBLIC;

public class RepositoryWriter {

  private final Filer mFiler;

  private RepositoryInfo mRepositoryInfo;

  private TableInfo mTableInfo;

  private JavaWriter mJavaWriter;

  public RepositoryWriter(final Filer filer) {
    mFiler = filer;
  }

  public void writeRepository(final RepositoryInfo repositoryInfo) throws IOException {
    mRepositoryInfo = repositoryInfo;
    mTableInfo = repositoryInfo.getTableInfo();

    JavaFileObject sourceFile = mFiler.createSourceFile(createRepositoryClassName());
    mJavaWriter = new JavaWriter(sourceFile.openWriter());
    mJavaWriter.setIndent("  ");

    writeHeader();
    writeBeginType();

    writeFields();
    writeConstructor();

    for (ExecutableElement executableElement : mRepositoryInfo.getMethodsToImplement()) {
      implement(executableElement);
    }

    writeCreateContentValues();
    writeReadCursor();

    writeEndType();

    mJavaWriter.close();
  }

  private void writeHeader() throws IOException {
    mJavaWriter.emitSingleLineComment("Generated by Trinity. Do not modify!");
    mJavaWriter.emitPackage(mRepositoryInfo.getPackageName());
  }

  private void writeBeginType() throws IOException {
    String extendingClass = mRepositoryInfo.isInterface() ? null : mRepositoryInfo.getFullyQualifiedName();
    String[] implementingInterface = mRepositoryInfo.isInterface() ? new String[]{mRepositoryInfo.getFullyQualifiedName()} : new String[0];

    mJavaWriter.beginType(createRepositoryClassName(), "class", PUBLIC, extendingClass, implementingInterface);
    mJavaWriter.emitEmptyLine();
  }

  private void writeFields() throws IOException {
    mJavaWriter.emitJavadoc("The {@link %s} that is used for persistence.", "android.database.sqlite.SQLiteDatabase");
    mJavaWriter.emitField("android.database.sqlite.SQLiteDatabase", "mDatabase", PRIVATE_FINAL);
    mJavaWriter.emitEmptyLine();
  }

  private void writeConstructor() throws IOException {
    mJavaWriter.beginConstructor(PUBLIC, "android.database.sqlite.SQLiteDatabase", "database");
    mJavaWriter.emitStatement("mDatabase = database");
    mJavaWriter.endConstructor();
    mJavaWriter.emitEmptyLine();
  }

  private void implement(final ExecutableElement executableElement) throws IOException {
    if (executableElement.getSimpleName().toString().equals("find")) {
      implementFind(executableElement);
    } else if (executableElement.getSimpleName().toString().equals("create")) {
      implementCreate(executableElement);
    } else {
      throw new UnsupportedOperationException(executableElement.getSimpleName().toString());
    }
  }

  private void implementFind(final ExecutableElement executableElement) throws IOException {
    mJavaWriter.beginMethod(
        executableElement.getReturnType().toString(),
        executableElement.getSimpleName().toString(),
        PUBLIC,
        "Long",
        "id"
    );

    mJavaWriter.beginControlFlow("if (id == null)");
    mJavaWriter.emitStatement("return null");
    mJavaWriter.endControlFlow();
    mJavaWriter.emitEmptyLine();

    mJavaWriter.emitStatement("%s result = null", mTableInfo.getEntityFQN());
    mJavaWriter.emitEmptyLine();

    mJavaWriter.emitStatement(
        "android.database.Cursor cursor = \n" +
            "new com.nhaarman.trinity.query.Select()\n" +
            "  .from(\"%s\")\n" +
            "  .where(\"id=?\", id)\n" +
            "  .limit(\"1\")\n" +
            "  .fetchFrom(mDatabase)",
        mTableInfo.getTableName()
    );
    mJavaWriter.emitEmptyLine();

    mJavaWriter.beginControlFlow("try");
    mJavaWriter.beginControlFlow("if (cursor.moveToFirst())");
    mJavaWriter.emitStatement("result = read(cursor)");
    mJavaWriter.endControlFlow();
    mJavaWriter.nextControlFlow("finally");
    mJavaWriter.emitStatement("cursor.close()");
    mJavaWriter.endControlFlow();

    mJavaWriter.emitEmptyLine();
    mJavaWriter.emitStatement("return result");

    mJavaWriter.endMethod();
    mJavaWriter.emitEmptyLine();
  }

  private void implementCreate(final ExecutableElement executableElement) throws IOException {
    mJavaWriter.beginMethod("Long", "create", PUBLIC, executableElement.getParameters().get(0).asType().toString(), "entity");

    mJavaWriter.emitStatement("Long result = null");
    mJavaWriter.emitEmptyLine();

    mJavaWriter.emitStatement("android.content.ContentValues contentValues = createContentValues(entity)");
    mJavaWriter.emitStatement("long id = mDatabase.insert(\"%s\", null, contentValues)", mTableInfo.getTableName());
    mJavaWriter.beginControlFlow("if (id != -1)");
    mJavaWriter.emitStatement("entity.setId(id)");
    mJavaWriter.emitStatement("result = id");
    mJavaWriter.endControlFlow();
    mJavaWriter.emitEmptyLine();

    mJavaWriter.emitStatement("return result");

    mJavaWriter.endMethod();
    mJavaWriter.emitEmptyLine();
  }

  private void writeCreateContentValues() throws IOException {
    mJavaWriter.beginMethod("android.content.ContentValues", "createContentValues", PUBLIC, mTableInfo.getEntityFQN(), "entity");

    mJavaWriter.emitStatement("android.content.ContentValues result = new android.content.ContentValues()");
    mJavaWriter.emitEmptyLine();

    for (ColumnInfo columnInfo : mTableInfo.getColumns()) {
      Collection<ColumnMethodInfo> methodInfos = columnInfo.getMethodInfos();
      for (ColumnMethodInfo methodInfo : methodInfos) {
        if (!methodInfo.isSetter()) {
          mJavaWriter.emitStatement("result.put(\"%s\", entity.%s())", columnInfo.getColumnName(), methodInfo.getExecutableElement().getSimpleName());
        }
      }
    }

    mJavaWriter.emitEmptyLine();
    mJavaWriter.emitStatement("return result");

    mJavaWriter.endMethod();
    mJavaWriter.emitEmptyLine();
  }

  private void writeReadCursor() throws IOException {
    mJavaWriter.beginMethod(mTableInfo.getEntityFQN(), "read", PUBLIC, "android.database.Cursor", "cursor");

    mJavaWriter.emitStatement("%s result = new %s()", mTableInfo.getEntityFQN(), mTableInfo.getEntityFQN());
    mJavaWriter.emitEmptyLine();

    for (ColumnInfo columnInfo : mTableInfo.getColumns()) {
      Collection<ColumnMethodInfo> methodInfos = columnInfo.getMethodInfos();
      for (ColumnMethodInfo methodInfo : methodInfos) {
        if (methodInfo.isSetter()) {
          mJavaWriter.emitStatement(
              "result.%s(cursor.get%s(cursor.getColumnIndex(\"%s\")))", methodInfo.getExecutableElement().getSimpleName(),
              methodInfo.getExecutableElement().getParameters().get(0).asType().toString().substring(
                  methodInfo.getExecutableElement().getParameters().get(0).asType().toString()
                            .lastIndexOf('.') + 1
              ),
              columnInfo.getColumnName()
          );
        }
      }
    }

    mJavaWriter.emitEmptyLine();
    mJavaWriter.emitStatement("return result");


    mJavaWriter.endMethod();
    mJavaWriter.emitEmptyLine();
  }

  private void writeEndType() throws IOException {
    mJavaWriter.endType();
  }


  private String createRepositoryClassName() {
    return String.format("Trinity_%s", mRepositoryInfo.getRepositoryElement().getSimpleName());
  }

}
